# -*- coding: utf-8 -*-
"""Student Enrollment Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h9XEsUQJPJd_2EpFPyduqk4uXUeaIFOq
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

import pandas as pd
import numpy as np

# Set random seed for reproducibility
np.random.seed(42)

# Generate synthetic data
num_students = 200  # Adjust this number if you want a bigger or smaller dataset

data = {
    'GPA': np.round(np.random.uniform(2.0, 4.0, num_students), 2),  # GPA between 2.0 and 4.0
    'Age': np.random.randint(18, 30, num_students),  # Age between 18 and 30
    'Attendance': np.round(np.random.uniform(50, 100, num_students), 2),  # Attendance percentage
    'FamilyIncome': np.random.randint(10000, 100000, num_students),  # Family income in a wide range
    'Enrolled': np.random.choice([0, 1], num_students, p=[0.3, 0.7])  # 0 = Not Enrolled, 1 = Enrolled
}

# Convert dictionary to DataFrame
df = pd.DataFrame(data)

# Show the first few rows
df.head()

df.to_csv('synthetic_student_data.csv', index=False)

data = pd.read_csv('synthetic_student_data.csv')

data.head()
data.info()

data = data.dropna()  # Drop rows with missing values

features = data[['GPA', 'Age', 'Attendance', 'FamilyIncome']]
target = data['Enrolled']  # Assuming 'Enrolled' is the column to predict

X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.3, random_state=42)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

feature_importances = model.feature_importances_
features_list = features.columns
plt.barh(features_list, feature_importances)
plt.xlabel("Feature Importance")
plt.ylabel("Feature")
plt.title("Feature Importance in Enrollment Prediction")
plt.show()

sns.countplot(y_pred)
plt.title("Predicted Enrollment Outcomes")
plt.xlabel("Enrollment Prediction")
plt.ylabel("Count")
plt.show()